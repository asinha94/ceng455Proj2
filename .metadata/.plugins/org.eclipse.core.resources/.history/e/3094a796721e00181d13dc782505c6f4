/* ###################################################################
**     Filename    : os_tasks.h
**     Project     : proj2
**     Processor   : MK64FN1M0VLL12
**     Component   : Events
**     Version     : Driver 01.00
**     Compiler    : GNU C Compiler
**     Date/Time   : 2018-03-01, 15:46, # CodeGen: 1
**     Abstract    :
**         This is user's event module.
**         Put your event handler code here.
**     Settings    :
**     Contents    :
**         user_task    - void user_task(os_task_param_t task_init_data);
**         handler_task - void handler_task(os_task_param_t task_init_data);
**
** ###################################################################*/
/*!
** @file os_tasks.h
** @version 01.00
** @brief
**         This is user's event module.
**         Put your event handler code here.
*/         
/*!
**  @addtogroup os_tasks_module os_tasks module documentation
**  @{
*/         

#ifndef __os_tasks_H
#define __os_tasks_H
/* MODULE os_tasks */

#include "fsl_device_registers.h"
#include "clockMan1.h"
#include "pin_init.h"
#include "osa1.h"
#include "mqx_ksdk.h"
#include "uart1.h"
#include "fsl_mpu1.h"
#include "fsl_hwtimer1.h"
#include "MainTask.h"
#include "HandlerTask.h"
#include "myUART.h"
#include "UserTask.h"

#ifdef __cplusplus
extern "C" {
#endif 

#include <message.h>

/* Size */
#define RX_QUEUE_SIZE 1
#define MESSAGE_SIZE 32

/* QUEUE IDs */
#define USER_SERVER_QUEUE_ID 1
#define USER_CLIENT_QUEUE_ID 2

/* Message Pool IDs */
_pool_id user_task_pool_id;

typedef struct server_message
{
   MESSAGE_HEADER_STRUCT   HEADER;
   unsigned char 		   DATA;
} SERVER_MESSAGE, * SERVER_MESSAGE_PTR;


typedef struct user_request {
	MESSAGE_HEADER_STRUCT   HEADER;
	unsigned char			DATA[MESSAGE_SIZE];
} USER_REQUEST, * USER_REQUEST_PTR;

typedef struct user_privilege {
	_queue_id 				queue_id;
	_task_id 				task_id;
	struct user_privilege 	* next;
} USER_PRIVILEGE, * USER_PRIVILEGE_PTR;

typedef enum RW_PRIVILEGE {
	READ = 0,
	WRITE,
	BOTH

};


/* Externed Globals */
extern USER_PRIVILEGE_PTR read_privileges;
extern USER_PRIVILEGE_PTR write_privileges;

/* Linked List Functions*/

extern add_rw_privilege(_queue_id, _task_id);
extern remove_rw_privilege(_queue_id, _task_id);


/*
** ===================================================================
**     Callback    : handler_task
**     Description : Task function entry.
**     Parameters  :
**       task_init_data - OS task parameter
**     Returns : Nothing
** ===================================================================
*/
void handler_task(os_task_param_t task_init_data);


/* END os_tasks */

#ifdef __cplusplus
}  /* extern "C" */
#endif 

#endif 
/* ifndef __os_tasks_H*/
/*!
** @}
*/
/*
** ###################################################################
**
**     This file was created by Processor Expert 10.5 [05.21]
**     for the Freescale Kinetis series of microcontrollers.
**
** ###################################################################
*/
