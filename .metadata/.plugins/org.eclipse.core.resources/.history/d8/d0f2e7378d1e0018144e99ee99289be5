/*
 * commands.c
 *
 *  Created on: Mar 1, 2018
 *      Author: asinha
 */

#include "Cpu.h"
#include "rtos_main_task.h"
#include "mutex.h"

#include "commands.h"

_queue_id OpenR(uint16_t queue_id) {
	return add_read_privilege(queue_id, _task_get_id());
}

int _getline(char * received) {
	int queueid = get_read_queueid(_task_get_id());

	if (queueid == 0) {
		return FALSE;
	}

	int user_msg_count = 0;

	while (1) {
		  user_msg_count = _msgq_get_count(userq_client_id);
		  if (user_msg_count == 0 && _task_get_error() != MQX_OK) {
			  printf("\r\nFailed to get user message count.\n");
			  printf("\r\nError code: 0x%x\n", _task_get_error());
			  _task_set_error(MQX_OK);
		  }

		  if (user_msg_count > 0) {
			  USER_REQUEST_PTR msg_ptr = _msgq_receive(queueid, 0);

		      if (_task_get_error() != MQX_EOK) {
				  printf("\r\n[%d] failed to recieve message from handler",  _task_get_id());
				  printf("\r\nError 0x%x", _task_get_error());
				  _task_set_error(MQX_OK);
				  return FALSE;
			  }

		      else {
		    	  strcpy(received, msg_ptr->DATA);
		    	  _msg_free(msg_ptr);
			      if (_task_get_error() != MQX_EOK) {
					  printf("\r\n[%d] failed to free message",  _task_get_id());
					  printf("\r\nError 0x%x", _task_get_error());
					  _task_set_error(MQX_OK);
					  return FALSE;
				  }
		    	  return TRUE;
		      }

		  }
		  OSA_TimeDelay(100);
	}


	USER_REQUEST_PTR msg_ptr;
	return FALSE;
}

_queue_id OpenW() {
	return add_write_privilege(_task_get_id());
}

int _putline(_queue_id qid, char * string) {
	return FALSE;
}

int Close(void) {
	bool read_priv_removed = remove_read_privilege(_task_get_id());
	bool write_priv_removed = remove_write_privilege(_task_get_id());
	return (read_priv_removed || write_priv_removed);
}



